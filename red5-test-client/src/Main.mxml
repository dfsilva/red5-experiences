<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="955" minHeight="600">
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			// Conexão com o Red5
			private var netConnection:NetConnection;
			
			// NetStream responsável por apresentar o vídeo
			private var netStream_play:NetStream;
			
			// NetStream responsável por publicar o vídeo
			private var netStream_publish:NetStream;
			
			// Canal para o Chat
			private var sharedObject:SharedObject;
			
			// Componente para apresnetar o vídeo
			private var video:Video
			
			// Nome da publicação do vídeo
			private var streamingNome:String="publishVideo"
			
			/**
			 * executa após carregar o aplicativo
			 */
			private function init():void
			{
				video=new Video();
				
				video.height=uiCaixaDoVideo.height;
				video.width=uiCaixaDoVideo.width;
			}
			
			/**
			 * Inicia a aplicação e faz a conexão
			 */
			private function conectar():void
			{
				if ( hostRTMP.text.length < 15 )
				{
					Alert.show( "URL muito pequena!" )
					return;
				}
				if ( nome.text.length < 3 )
				{
					Alert.show( "Nome tem que ter mais de 3 caracteres!" )
					return;
				}
				if ( netConnection != null )
					netConnection=null;
				netConnection=new NetConnection();
				netConnection.addEventListener( NetStatusEvent.NET_STATUS, netStatus );
				netConnection.addEventListener( AsyncErrorEvent.ASYNC_ERROR, asyncError )
				netConnection.connect( hostRTMP.text, nome.text );
				netConnection.client=this;
			}
			
			/**
			 * Método que recebe a lista de usuários enviado pleo Red5
			 */
			public function listaUsuarios( lista:Array ):void
			{
				datagridUsuarios.dataProvider=lista;
			}
			
			/**
			 * Método que recebe o Status da conexão
			 */
			private function netStatus( e:NetStatusEvent ):void
			{
				switch ( e.info.code )
				{
					case "NetConnection.Connect.Success":
						connectado()
						viewstack.selectedIndex=1;
						Alert.show("Conexao Efetuada com sucesso!");
						break;
					case "NetConnection.Connect.Closed":
						viewstack.selectedIndex=0;
						Alert.show("Conexao Fechada!");
						break;
					case "NetConnection.Connect.Rejected":
						viewstack.selectedIndex=0;
						Alert.show("Conexao Rejeitada!");
						break;
					case "NetConnection.Connect.Failed":
						viewstack.selectedIndex=0;
						Alert.show("Conexao Falhou!");
						break;
					default:
						viewstack.selectedIndex=0;
						Alert.show("Status de rede retornado desconhecido!");
				}
			}
			
			/**
			 * Chamado quando deu sucesso na conexão com o Red5
			 */
			private function connectado():void
			{
				sharedObject=SharedObject.getRemote( "chat", netConnection.uri, true )
				sharedObject.addEventListener( SyncEvent.SYNC, OnSync );
				sharedObject.addEventListener( AsyncErrorEvent.ASYNC_ERROR, asyncError );
				sharedObject.connect( netConnection );
				sharedObject.client=this;
				
				netStream_play=new NetStream( netConnection )
				video.attachNetStream( netStream_play );
				uiCaixaDoVideo.addChild( video );
				netStream_play.play( streamingNome );
			}
			
			/**
			 * Método responsável por tratar os AsyncErrorEvent
			 */
			private function asyncError( e:AsyncErrorEvent ):void
			{
				trace( e )
			}
			
			/**
			 * Método responsável por tratar os SyncEvent
			 */
			private function OnSync( e:SyncEvent ):void
			{
				trace( e )
			}
			
			/**
			 * Trata o click do Botão Publicar WebCam
			 *
			 * Se marcado publica, ao desmarcar para a publicação.
			 */
			private function publicar():void
			{
				if ( btPublicar.selected )
				{
					btPublicar.label="Parar publicação!"
					
					netStream_publish=new NetStream( netConnection );
					netStream_publish.attachCamera( Camera.getCamera());
					netStream_publish.attachAudio( Microphone.getMicrophone());
					
					// nome que será publicado
					netStream_publish.publish( streamingNome );
				}
				else
				{
					btPublicar.label="Publicar no servidor RTMP!"
					
					netStream_publish.close()
					netStream_publish=null
				}
			}
			
			/**
			 * Envia o testo por Chat e limpa o campo.
			 */
			private function enviarMensagem():void
			{
				var msg:String="<p><b>" + nome.text + " diz:</b> " + mensagem.text + "</p>";
				sharedObject.send( "recebemsg", msg );
				
				mensagem.text='';
			}
			
			/**
			 * Recebe as mensagens postada no Chat
			 */
			public function recebemsg( msg:String ):void
			{
				areaMensagem.htmlText+=msg;
				areaMensagem.validateNow();
				areaMensagem.verticalScrollPosition=areaMensagem.maxVerticalScrollPosition;
			}
		]]>
	</fx:Script>
	
	<mx:ViewStack id="viewstack"
				  width="100%"
				  height="100%"
				  creationPolicy="all">
		<mx:VBox width="100%"
				 height="100%"
				 verticalAlign="middle"
				 horizontalAlign="center">
			<mx:Form>
				<mx:FormItem label="URL do servidor:" fontWeight="bold">
					<mx:TextInput id="hostRTMP"
								  text="rtmp://localhost/confDemo"
								  width="200"
								  fontWeight="normal"/>
				</mx:FormItem>
				<mx:FormItem label="Nome:" fontWeight="bold">
					<mx:TextInput id="nome" width="200" fontWeight="normal"/>
				</mx:FormItem>
				<mx:FormItem>
					<mx:Button label="Conectar no Red5" click="conectar()" fontWeight="normal"/>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>
		<mx:VBox width="100%" height="100%">
			<mx:HBox width="100%" height="100%">
				<mx:VBox height="100%">
					<mx:Canvas left="10"
							   top="85"
							   width="160"
							   height="120"
							   backgroundColor="#000000">
						<mx:UIComponent width="100%" height="100%" id="uiCaixaDoVideo"/>
					</mx:Canvas>
					<mx:Button id="btPublicar"
							   label="Publicar WebCam"
							   click="publicar()"
							   toggle="true"/>
					<mx:DataGrid id="datagridUsuarios" width="100%" height="100%">
						<mx:columns>
							<mx:DataGridColumn headerText="Usuários" dataField="USER_NOME"/>
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
				<mx:VBox height="100%" width="100%">
					<mx:TextArea id="areaMensagem"
								 width="100%"
								 height="100%"
								 borderStyle="none"
								 alpha="0.63"
								 editable="false"/>
					<mx:HBox width="100%">
						<mx:TextInput id="mensagem" width="100%" enter="enviarMensagem()"/>
						<mx:Button label="Enviar" click="enviarMensagem()"/>
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>
	</mx:ViewStack>
</s:Application>
